通过chmod u+s 提权 使文件具有s属性
s属性表示当前用户具有文件拥有者的权限，如果文件拥有者为root，那么就具有root用户的权限
which passwd 查看passwd的文件路径 
使用 ls -l /usr/bin/passwd  发现passwd的权限为-rwsr-xr-x 1 root root 59640 1月  25  2018 /usr/bin/passwd ，说明passwd具有s属性
使用getppid()后the current program's ppid is 3375 通过ps查看当前进程的父进程为bash 3375 pts/0    00:00:00 bash   表示shell是父进程，
这个就是shell  forspy@forspy1:~/linuxc/test_linuxc_process_thread2$
ps -A查看所有进程
运行getpid()程序the current program's pid is 4219

进程的创建 ==0为子进程 >0为父进程 <0为创建失败
pid_t fork(void);
父进程和子进程的内核是共享的，内存不共享（复制进程的资源重新开辟），即子进程的释放不会影响父进程
pid_t vfork(void);//轻量级进程的创建，类似于父进程创建子进程 这两个进程是共享资源的（共享父进程的代码段、数据段（全局变量），其他段自己独立）

从内存储存位置划分：数据段、代码段、bss段、堆（heap）、栈(stack)
数据段：通常是指用来存放程序中已初始化的全局变量的一块内存区域。数据段属于静态内存分配 比如static 静态变量就在数据段创建 比如全局 const
代码段：通常是指用来存放程序执行代码的一块内存区域（类似于mov cpy汇编指令）
bss段：BSS段通常是指用来存放程序中未初始化的全局变量和静态变量的一块内存区域。特点是可读写的，在程序执行之前BSS段会自动清0。
程序运行中有两个存储空间可用，一个是栈，是归属于进程本身的，另外一个是堆，所有进程共用的。
堆（heap）：堆是用于存放进程运行中被动态分配的内存段，它的大小并不固定，可动态扩张或缩减。当进程调用malloc等函数分配内存时，新分配的内存就被动态添加到堆上（堆被扩张）；
当利用free等函数释放内存时，被释放的内存从堆中被剔除（堆被缩减）。
栈(stack)：栈又称堆栈，用户存放程序临时创建的局部变量。在函数被调用时，其参数也会被压入发起调用的进程栈中，并且待到调用结束后，
函数的返回值也会被存放回栈中。由于栈的后进先出特点，所以栈特别方便用来保存/恢复调用现场。

全局静态区，文字常量区，程序代码区是从内存地址分配的角度来描述的。
全局区（静态区）（static）—，全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在一块区域， 未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。

文字常量区—常量字符串就是放在这里的。
程序代码区—存放函数体的二进制代码。
注意vfork由于一些内存是共享的，所以要避免二次释放比如free()\exit()多次