# Linux 多线程编程

## 线程的概念
* 线程不代表资源，是程序的最小执行单元
* 进程代表资源，是程序调度的最小单元
* Linux应用层中，进程和线程是有区别的，在内核层中是没有区别的 
* 线程的管理，线程与进程的区别 线程是共享进程资源的，所以线程间不需要通信
* 线程的同步与互斥
* 线程的信号处理 
* 线程的属性 

## 线程的管理
> linux中使用第三方的库进行多线程实现，-lpthread 
> gcc -g -o xxxx xxx.c -lpthread


pthread_self() 获得线程的tid
SYS_gettid    获得线程的tpid

### 线程创建 

int pthread_create(pthread_t *thread, const pthread_attr_t *attr,
                          void *(*start_routine) (void *), void *arg);

pthread_t *thread 线程的id 线程在进程中容器里的编号
pthread_attr_t *attr  NULL 
void *(*start_routine) (void *) 线程执行函数
void *arg 传递给线程的参数

pmap

### 线程退出与等待
void pthread_exit(void *retval);

* 自行调用pthread_exit
* 其他线程调用 pthread_cancel 
* 线程执行结束
* 创建线程的进程退出  
* 其中一个线程执行了exec类函数，因为会替换当前进程所有的地址空间
子线程退出仅释放自己私有空间，私有栈空间

int pthread_join(pthread_t thread, void **retval);//等待其他线程退出 void **retval 接收void pthread_exit(void *retval);里面retval的地址



atexit()
//线程退出前的一些操作
void pthread_cleanup_push(void (*routine)(void *)/*回调函数*/, void *arg);
void pthread_cleanup_pop(int execute);
解决线程终止或者异常终止时，释放锁定的资源问题


### 线程取消
> 线程能否被取消要看两点：
* 线程是否具有可取消属性---默认可以被取消
* 线程如果设置为到可取消点才能被取消时，线程不会被立刻取消 

线程的取消状态属性 
int pthread_setcancelstate(int state, int *oldstate);
 可取消   不可取消
PTHREAD_CANCEL_ENABLE
PTHREAD_CANCEL_DISABLE---->未决取消

线程的取消类型属性
int pthread_setcanceltype(int type, int *oldtype);

立刻被取消  PTHREAD_CANCEL_ASYNCHRONOUS

只有到达一定取消点，才会取消  PTHREAD_CANCEL_DEFERRED


### 线程的私有数据

TSD私有数据，同名但是不同内存地址的私有数据结构 

* 创建 
int pthread_key_create(pthread_key_t *key, void (*destructor)(void*));
int pthread_key_delete(pthread_key_t key);

* 读写
 void *pthread_getspecific(pthread_key_t key);
int pthread_setspecific(pthread_key_t key, const void *value);


## 线程的互斥

### 互斥锁通信机制 
* pthread_mutex_t 
* int pthread_mutex_destroy(pthread_mutex_t *mutex);
* int pthread_mutex_init(pthread_mutex_t *restrict mutex,
              const pthread_mutexattr_t *restrict attr);
* int pthread_mutex_lock(pthread_mutex_t *mutex);
* int pthread_mutex_trylock(pthread_mutex_t *mutex);
* int pthread_mutex_unlock(pthread_mutex_t *mutex);
 

条件变量通信机制
pthread_mutex_t work_mutex 
int i=3;
int j=7;

thread A            thread B
pthread_lock		pthread_lock
					pthread_cond_wait
					if(i==j)
{					{
					  
	i++;			  do_something();
	j--;			    
 if(i==j)
pthread_cond_signal
}					}
pthread_unlock	    pthread_unlock

### 条件变量 

* 对象：pthread_cond_t  condtion 

* 初始化方法：
```
#include <pthread.h>

int pthread_cond_destroy(pthread_cond_t *cond);
int pthread_cond_init(pthread_cond_t * cond,const pthread_condattr_t * attr);

pthread_cond_t cond = PTHREAD_COND_INITIALIZER;
```
* 条件变量等待 
```
等待条件变量 
#include <pthread.h>

int pthread_cond_timedwait(pthread_cond_t *restrict cond,pthread_mutex_t *restrict mutex,
								const struct timespec *restrict abstime);
	int pthread_cond_wait(pthread_cond_t *restrict cond,
					pthread_mutex_t *restrict mutex);
```

* 条件变量通知
```
通知条件变量
#include <pthread.h>

int pthread_cond_broadcast(pthread_cond_t *cond);
int pthread_cond_signal(pthread_cond_t *cond);
```

* 注意：条件变量要配合互斥体进行操作

### 读写锁





































汇编 python web运维（php jsp html） linux  c/c++ java  安卓 
安装使用黑客软件


php代码审计 webshell 菜刀
html代码审计
pwm  做逆向分析--分析栈溢出 堆溢出漏洞
# 介绍黑客大赛
 ctf 
 xctf
 flag
 defcon ctf 
# 介绍特训班的课时
# 介绍特训班学习内容
# 介绍网络安全 





