进程间通信
通信模式：POSIX模式、system v ipc 
POSIX模式分为无名管道Pipe、有名管道fifo   POSIX基于文件机制

## 无名管道 Pipe
>  同主机进程间数据交互机制： 
* 无名管道(PIPE)：只有创建该管道的程序，才能够找到该管道(亲缘进程通信) 
* 单向传输
* 控制进程只有pipe的一端
* pipe的阻塞操作
*fd[0] 读  fd[1]写 
*文件类型p--管道文件，不会被显示创建

## 有名管道 fifo
> 依赖于文件系统，像普通文件一样具有磁盘路径，文件权限和其他属性，所有程序都可以通过path找到有名管道
* fifo是一个文件，存储信息在内存，当两个进程都消失，数据消息,文件只有接口的作用
* mkfifo
int mkfifo(const char* pathname, mode_t mode);		
* 单项通信	     
* 只能够进行少量数据传输
* 只能一对一进行传输
* 两个进程，中途退出了一个进程，未退出的一端如果是写操作的话，返回sigpipe信号 
* 未退出的一端如果是阻塞读操作的话，该读操作不会继续阻塞，直接返回0
*文件类型p--管道文件，会被显示创建，类似于共享文件，但是进程结束后文件的内容会自动清空
shell命令下创建fifo文件 mknod 文件名 p
shell下  echo 要输入的内容  fifo文件名    注：这样随着echo进程的结束会立即返回
一端使用cat fifo文件名阻塞等待读取 另开一个终端 shell下  echo 要输入的内容 >  fifo文件名    注：这样就实现了任意两个进程之间的通信
man echo查看用法

单工数据传输只支持数据在一个方向上传输；在同一时间只有一方能接受或发送信息，不能实现双向通信，举例：电视，广播。

半双工数据传输允许数据在两个方向上传输,但是,在某一时刻,只允许数据在一个方向上传输,它实际上是一种切换方向的单工通信；在同一时间只可以有一方接受或发送信息，可以实现双向通信。举例：对讲机。
全双工数据通信允许数据同时在两个方向上传输,因此,全双工通信是两个单工通信方式的结合,它要求发送设备和接收设备都有独立的接收和发送能力；在同一时间可以同时接受和发送信息，实现双向通信，举例：电话通信。

