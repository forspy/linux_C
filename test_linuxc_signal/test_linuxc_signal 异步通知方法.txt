Signal 异步通知方法
目标
如何发起异步操作(对本身发起、对其他进程发起)
如何安装信号
如何屏蔽及管理信号
如何利用信号进行阻塞操作
项目
信号驱动的服务器
电报机
Linux中的信号
#define SIGHUP         1
#define SIGINT         2 //ctrl-c 终止一个进程；进程无法再重续
#define SIGQUIT         3
#define SIGILL         4
#define SIGTRAP         5
#define SIGABRT         6
#define SIGIOT         6
#define SIGBUS         7
#define SIGFPE         8
#define SIGKILL         9
#define SIGUSR1        10
#define SIGSEGV        11
#define SIGUSR2        12
#define SIGPIPE        13
#define SIGALRM        14
#define SIGTERM        15
#define SIGSTKFLT    16
#define SIGCHLD        17
#define SIGCONT        18
#define SIGSTOP        19   //ctrl+z 常用于挂起一个进程。进程从前台转入后台并暂停，可以用bg使其后台继续运行，fg使其转入前台运行。
#define SIGTSTP        20
#define SIGTTIN        21
#define SIGTTOU        22
#define SIGURG        23
#define SIGXCPU        24
#define SIGXFSZ        25
#define SIGVTALRM    26
#define SIGPROF        27
#define SIGWINCH    28
#define SIGIO        29
#define SIGPOLL        SIGIO
/*
#define SIGLOST        29
*/
#define SIGPWR        30
#define SIGSYS        31
/* signal 31 is no longer "unused", but the SIGUNUSED macro remains for backwards compatibility */
#define    SIGUNUSED    31

/* These should not be considered constants from userland.  */
#define SIGRTMIN    32
#define SIGRTMAX    _NSIG
信号的基本操作
发送信号
安装中断
递送信号
捕获信号
屏蔽信号
如何发起异步操作
kill //kill这个命令可以用来发送指令
kill 命令 eg：kill -signum pid  pid可以由ps指令得到（我用来定位进程的命令有两个：top （实时）和 ps 命令）
int kill(pid,signum);//signum 就是上面的这些宏定义的信号
pid>0 发给pid进程
pid=0 发给当前进程组的所有进程
pid=-1 发送给所有进程
pid<0 发送给|PID|所对应的组上

pid=getpid()
gpid=getgpid()
raise
自举信号，会给自己发送一个信号
int raise(int sig);
int kill(getpid,signum);

alarm
定时函数

unsigned int alarm(unsigned int seconds);
函数会在所指定的seconds之后收到SIGALRM信号

ualarm

 useconds_t ualarm(useconds_t usecs, useconds_t interval);
以useconds为单位，第一个参数为第一次产生时间，第二个参数为间隔产生

setitimer 定时器
//更高级的定时器设置
int getitimer(int which, struct itimerval curr_value);//获取时间
int setitimer(int which, const struct itimerval new_value,
struct itimerval *old_value);//设置时间，which 的参数有ITIMER_REAL和ITIMER_VIRTUAL
Linux会给进程提供三个定时器
ITIMER_REAL:以逝去时间递减--发出SIGALRM信号 使用signal(SIGALRM,回调函数)捕捉--setitimer(ITIMER_REAL, &value, &ovalue); 
ITIMER_VIRTUAL：  --发出SIGVTALRM信号 使用signal(SIGVTALRM,回调函数)捕捉--setitimer(ITIMER_VIRTUAL, &value2, &ovalue);

        struct itimerval {
               struct timeval it_interval; /* next value */
               struct timeval it_value;    /* current value */
           };

           struct timeval {
               time_t      tv_sec;         /* seconds */
               suseconds_t tv_usec;        /* microseconds */
           };
		   
		   
		   
安装和捕获信号
忽略信号
自定义捕捉函数
系统默认信号函数
signal
signal(signum,handler)

kill -SIGUSR1 pid 
SIGKILL SIGSTOP 不能够被安装

忽略信号
signal(signum,SIG_IGN)

sigaction对象

int sigaction(int signum, const struct sigaction *act,
                     struct sigaction *oldact);//sigaction为安装一个信号，sigaction比signal的互斥性要好

struct sigaction {
       void     (*sa_handler)(int);二选一
       void     (*sa_sigaction)(int, siginfo_t *, void *);二选一（推荐）
       sigset_t   sa_mask;//信号掩码 --信号屏蔽集合
       int        sa_flags;  //会影响信号接受特殊标志
       void     (*sa_restorer)(void);
   };

sigset_t 信号集合 


siginfo_t {
   int      si_signo;    /* Signal number */
   int      si_errno;    /* An errno value */
   int      si_code;     /* Signal code */
   int      si_trapno;   /* Trap number that caused
                            hardware-generated signal
                            (unused on most architectures) */
   pid_t    si_pid;      /* Sending process ID */
   uid_t    si_uid;      /* Real user ID of sending process */
   int      si_status;   /* Exit value or signal */
   clock_t  si_utime;    /* User time consumed */
   clock_t  si_stime;    /* System time consumed */
   sigval_t si_value;    /* Signal value */
   int      si_int;      /* POSIX.1b signal */
   void    *si_ptr;      /* POSIX.1b signal */
   int      si_overrun;  /* Timer overrun count; POSIX.1b timers */
   int      si_timerid;  /* Timer ID; POSIX.1b timers */
   void    *si_addr;     /* Memory location which caused fault */
   long     si_band;     /* Band event (was int in
                            glibc 2.3.2 and earlier) */
   int      si_fd;       /* File descriptor */
   short    si_addr_lsb; /* Least significant bit of address
                            (since Linux 2.6.32) */
}
信号会唤醒当前进程的阻塞状态
sigval_t

union sigval {
int sival_int;
void *sival_ptr;
};

sigqueue
```
include
include
include
include
int main(int argc,char *argv[])
{
if(argc!=2)
{
printf("arguments error!");
exit(0);
}

pid_t pid=atoi(argv[1]);//将进程号转化为整数
union sigval v;
v.sival_int=100;
//这儿只是利用SIGINT来发送数据，
//任何信号都行，只需要发送端与接收端规定一致即可
sigqueue(pid,SIGINT,v);
return 0;
}
```

信号集合
sigset_t sa_mas
int sigemptyset(sigset_t set);
int sigfillset(sigset_t set);
int sigaddset(sigset_t set, int signum);
int sigdelset(sigset_t set, int signum);
int sigismember(const sigset_t *set, int signum);

设置信号屏蔽集合
int sigprocmask(int how, const sigset_t set, sigset_t *oldset);
SIG_BLOCK
SIG_UNBLOCK
SIG_SETMASK

未决信号
sigpending(sigset）

sigsuspend 函数
int sigsuspend(const sigset_t *mask);

项目设计 一
server
a
96
1100000
USER2
USER2
USER1
USER1
USER1
USER1
USER1

client
stdin： a
97
1100001
USER2
USER2
USER1
USER1
USER1
USER1
USER1